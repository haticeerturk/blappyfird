package com.example.deneme_1;

import org.anddev.andengine.engine.Engine;
import org.anddev.andengine.engine.camera.Camera;
import org.anddev.andengine.engine.options.EngineOptions;
import org.anddev.andengine.engine.options.EngineOptions.ScreenOrientation;
import org.anddev.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.anddev.andengine.entity.scene.Scene;
import org.anddev.andengine.entity.sprite.Sprite;
import org.anddev.andengine.entity.util.FPSLogger;
import org.anddev.andengine.opengl.texture.Texture;
import org.anddev.andengine.opengl.texture.TextureOptions;
import org.anddev.andengine.opengl.texture.region.TextureRegion;
import org.anddev.andengine.opengl.texture.region.TextureRegionFactory;
import org.anddev.andengine.ui.activity.BaseGameActivity;
import org.anddev.andengine.input.touch.TouchEvent;
import org.anddev.andengine.entity.scene.Scene.IOnSceneTouchListener;
import org.anddev.andengine.entity.scene.Scene.IOnAreaTouchListener;
import org.anddev.andengine.entity.scene.Scene.ITouchArea;



public class MainActivity extends BaseGameActivity {

	private static final int CAMERA_WIDTH = 800;
	private static final int CAMERA_HEIGHT = 480;
	private Camera camera;
	private Scene scene;
	Texture textureResim1;
	TextureRegion textRegResim1;
	Sprite spriteResim1;
	
	
	@Override
	public Engine onLoadEngine() {
		camera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
	    final EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.LANDSCAPE, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), camera);
	    engineOptions.getTouchOptions().setRunOnUpdateThread(true);
		Engine engine = new Engine(engineOptions);
		
	    return engine;
	}

	@Override
	public void onLoadResources() {
		textureResim1=new Texture(128,128,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		
		textRegResim1 = TextureRegionFactory.createFromAsset(textureResim1, this, "gfx/ball.png", 0, 0);
		mEngine.getTextureManager().loadTextures(textureResim1); 
	}


	
	@Override
	public Scene onLoadScene() {
		this.mEngine.registerUpdateHandler(new FPSLogger());	
        this.scene = new Scene();
        
        spriteResim1 = new Sprite(100, 100, textRegResim1) {
            @Override
            public boolean onAreaTouched(final TouchEvent pSceneTouchEvent, final float pTouchAreaLocalX, final float pTouchAreaLocalY) {
                    this.setPosition(pSceneTouchEvent.getX() - this.getWidth() / 2, pSceneTouchEvent.getY() - this.getHeight() / 2);
                    return true;
            }
        };

        //spriteResim1.setScale(4);  //Boyutunu büyütür.
        scene.registerTouchArea(spriteResim1); //Olmazsa olmaz!
        scene.attachChild(spriteResim1);
        //scene.setTouchAreaBindingEnabled(true);
                
        /*this.scene.setOnSceneTouchListener(new IOnSceneTouchListener()
        {
            public boolean onSceneTouchEvent(Scene pScene, TouchEvent pSceneTouchEvent)
            {
                if(pSceneTouchEvent.isActionDown())
                {
                    resimEkle(pSceneTouchEvent.getX() - textureResim1.getWidth()/2, pSceneTouchEvent.getY() - textureResim1.getHeight()/2);
                }  
                return true;
            }
        });   */
        //Tıklanılan yerde sprite oluşturma...

        
		
        return this.scene;
	}

	@Override
	public void onLoadComplete() {
		// TODO Auto-generated method stub
		
	}
	
	private void resimEkle(float x, float y)
    {
        spriteResim1 = new Sprite(x,y, textRegResim1);
        this.scene.attachChild(spriteResim1);
    }
	
	
}
