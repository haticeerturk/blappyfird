package com.example.deneme_1;


import javax.net.ssl.X509KeyManager;

import org.anddev.andengine.engine.Engine;
import org.anddev.andengine.engine.camera.Camera;
import org.anddev.andengine.engine.handler.timer.ITimerCallback;
import org.anddev.andengine.engine.handler.timer.TimerHandler;
import org.anddev.andengine.engine.options.EngineOptions;
import org.anddev.andengine.engine.options.EngineOptions.ScreenOrientation;
import org.anddev.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy;
import org.anddev.andengine.entity.scene.Scene;
import org.anddev.andengine.entity.sprite.Sprite;
import org.anddev.andengine.entity.util.FPSLogger;
import org.anddev.andengine.opengl.texture.Texture;
import org.anddev.andengine.opengl.texture.TextureOptions;
import org.anddev.andengine.opengl.texture.region.TextureRegion;
import org.anddev.andengine.opengl.texture.region.TextureRegionFactory;
import org.anddev.andengine.ui.activity.BaseGameActivity;
import org.anddev.andengine.input.touch.TouchEvent;
import org.anddev.andengine.entity.scene.Scene.IOnSceneTouchListener;
import org.anddev.andengine.entity.scene.Scene.IOnAreaTouchListener;
import org.anddev.andengine.entity.scene.Scene.ITouchArea;

import android.text.method.Touch;
import android.util.Log;



public class MainActivity extends BaseGameActivity {

	private static final int CAMERA_WIDTH = 480;
	private static final int CAMERA_HEIGHT = 800;
	private Camera camera;
	private Scene scene;
	Texture textureResim1;
	TextureRegion textRegResim1;
	Sprite spriteResim1;
	
	
	@Override
	public Engine onLoadEngine() {
		camera = new Camera(0, 0, CAMERA_WIDTH, CAMERA_HEIGHT);
	    final EngineOptions engineOptions = new EngineOptions(true, ScreenOrientation.PORTRAIT, new RatioResolutionPolicy(CAMERA_WIDTH, CAMERA_HEIGHT), camera);
	    engineOptions.getTouchOptions().setRunOnUpdateThread(true);
		Engine engine = new Engine(engineOptions);
		
	    return engine;
	}

	@Override
	public void onLoadResources() {
		textureResim1=new Texture(64,64,TextureOptions.BILINEAR_PREMULTIPLYALPHA);
		
		textRegResim1 = TextureRegionFactory.createFromAsset(textureResim1, this, "gfx/ball.png", 0, 0);
		mEngine.getTextureManager().loadTextures(textureResim1); 
	}

	float XKOR = 0;
	float YKOR = 0;
	float KORVALUE = 35;
	float gravity = 0.9f;  
	float speedY = 0; 
	float speedX = 5;
	boolean ySpeedBool = false;
	boolean isTouch = false;
	boolean isTouchCenter = false;
	boolean isTouchLeft = false;
	boolean isTouchRight = false;
	
	@Override
	public Scene onLoadScene() {
		
		mEngine.registerUpdateHandler(new TimerHandler(0.02f, true, new ITimerCallback() {
	        @Override
	        public void onTimePassed(final TimerHandler pTimerHandler) {
	        	
	        		YKOR = spriteResim1.getY();
	        		XKOR = spriteResim1.getX();
	        	
	        		if(isTouch) {//Gravity 
	        			
	        			if(ySpeedBool)
	        			{
	        			speedY = -10.0f;
	        			ySpeedBool = false;
	        			}
	        		/*else if(isTouchRight || isTouchLeft) {
	        		
	        			isTouchRight = false;
	        			isTouchLeft = false;
	        		}*/
	        		
		        	//YKOR = YKOR + speedY;
		        	//speedY = speedY + gravity;
	        		
	        		
	        		if(isTouchRight) {
	        			XKOR += speedX * pTimerHandler.getTimerSeconds() * KORVALUE;
		        		YKOR += speedY * pTimerHandler.getTimerSeconds() * KORVALUE;      // Apply vertical velocity to X position
		        		speedY += gravity * pTimerHandler.getTimerSeconds() * KORVALUE; 
	        		}
	        		else if(isTouchLeft) {
	        			XKOR -= speedX * pTimerHandler.getTimerSeconds() * KORVALUE;
			        	YKOR += speedY * pTimerHandler.getTimerSeconds() * KORVALUE;      // Apply vertical velocity to X position
			        	speedY += gravity * pTimerHandler.getTimerSeconds() * KORVALUE;  
	        		}
	        		else if(isTouchCenter){
	        			YKOR += speedY * pTimerHandler.getTimerSeconds() * KORVALUE;      // Apply vertical velocity to X position
	        			speedY += gravity * pTimerHandler.getTimerSeconds() * KORVALUE;   
	        		}
	        		
		        	if (YKOR > CAMERA_HEIGHT - spriteResim1.getWidth()) {
		        		isTouch = false;  	
		        		isTouchCenter = false;
		        		isTouchLeft = false;
		        		isTouchRight = false;
		        	}
		        	
		        	if(speedY < -6.0f)       // If character is still ascending in the jump
		                speedY = -6.0f;   
		        	
		        	spriteResim1.setPosition(XKOR, YKOR);	
	        		}   	
	        }
		}));
		
		this.scene = new Scene();
        
        spriteResim1 = new Sprite(CAMERA_WIDTH/2 - 32, CAMERA_HEIGHT - 64, textRegResim1); /*{
            @Override
            public boolean onAreaTouched(final TouchEvent pSceneTouchEvent, final float pTouchAreaLocalX, final float pTouchAreaLocalY) {
                    this.setPosition(pSceneTouchEvent.getX() - this.getWidth() / 2, pSceneTouchEvent.getY() - this.getHeight() / 2);
                    return true;
            } 
        };*/
        
        this.scene.setOnSceneTouchListener(new IOnSceneTouchListener() {
			@Override
			public boolean onSceneTouchEvent(Scene pScene, TouchEvent pSceneTouchEvent) {
				
				/*if(speedY >= 0)
				{
					speedY = speedY * -0.70f + spriteResim1.getHeight()/100;  
				}
				else 
				{	
					speedY = speedY * 0.70f  + spriteResim1.getHeight()/100;  
				}*/
				
				if(pSceneTouchEvent.getX() > CAMERA_WIDTH - spriteResim1.getWidth() * 2)
				{
					isTouchRight = true;
					isTouchLeft = false;
		        	isTouchCenter = false;
				}//spriteResim1.setPosition(spriteResim1.getX() + speedX, spriteResim1.getY());
				else if(pSceneTouchEvent.getX() < spriteResim1.getWidth() * 2)
				{
					isTouchRight = false;
	        		isTouchCenter = false;
					isTouchLeft = true;
				}	//spriteResim1.setPosition(spriteResim1.getX() - speedX, spriteResim1.getY());
				else //Topun yörüngesine dokunuldu ise... 				
				{
					isTouchCenter = true;
					isTouchLeft = false;
	        		isTouchRight = false;
				}
	
					isTouch = true;
					ySpeedBool = true;
					return false;
			}
		});

        //spriteResim1.setScale(2);  //Boyutunu büyütür.
        scene.registerTouchArea(spriteResim1); //Olmazsa olmaz!
        scene.attachChild(spriteResim1);
        //scene.setTouchAreaBindingEnabled(true);
		
        return this.scene;
	}

	@Override
	public void onLoadComplete() {
		// TODO Auto-generated method stub
		
	}
}
